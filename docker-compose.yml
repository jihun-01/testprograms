version: '3.8'

services:
  # MySQL 데이터베이스
  mysql:
    image: mysql:8.0
    container_name: logistics-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-logistics_db}
      MYSQL_USER: ${DB_USER:-logistics_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-password}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
      LANG: C.UTF-8
    ports:
      - "3306:3306"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db/my.cnf:/etc/mysql/conf.d/my.cnf
      - mysql-data:/var/lib/mysql
    networks:
      - logistics-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-rootpassword}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # 백엔드 API 서버
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: logistics-backend
    restart: on-failure:5
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=8080
      - DB_HOST=${DB_HOST:-mysql}
      - DB_PORT=${DB_PORT:-3306}
      - DB_NAME=${DB_NAME:-logistics_db}
      - DB_USER=${DB_USER:-logistics_user}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - JWT_SECRET=${JWT_SECRET:-your_development_jwt_secret_key}
      - BYPASS_AUTH=${BYPASS_AUTH:-true}
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - logistics-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    command: npm start

  # 프론트엔드 웹 애플리케이션
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: logistics-frontend
    restart: always
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:8080/api
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - logistics-network
    command: npm start

  # Prometheus (모니터링)
  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: logistics-prometheus
    restart: always
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - logistics-network

  # Grafana (대시보드)
  grafana:
    image: grafana/grafana:9.3.2
    container_name: logistics-grafana
    restart: always
    depends_on:
      - prometheus
      - loki
    ports:
      - "3050:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    networks:
      - logistics-network

  # Loki (로그 저장)
  loki:
    image: grafana/loki:2.6.1
    container_name: logistics-loki
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/loki.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/loki.yaml
    networks:
      - logistics-network

networks:
  logistics-network:
    driver: bridge

volumes:
  mysql-data:
  prometheus-data:
  grafana-data:
  loki-data: